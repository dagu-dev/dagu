# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DAGU Developers
# This file is distributed under the same license as the DAGU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DAGU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-17 15:18+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja_JP\n"
"Language-Team: ja_JP <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/yaml_format.rst:4
msgid "YAML Format"
msgstr ""

#: ../../source/yaml_format.rst:10
msgid "Minimal DAG Definition"
msgstr ""

#: ../../source/yaml_format.rst:12
msgid "The minimal DAG definition is as simple as follows."
msgstr ""

#: ../../source/yaml_format.rst:27
msgid "Specifying Working Directory"
msgstr ""

#: ../../source/yaml_format.rst:37
msgid "Running Arbitrary Code Snippets"
msgstr ""

#: ../../source/yaml_format.rst:39
msgid ""
"``script`` field provides a way to run arbitrary snippets of code in any "
"language."
msgstr ""

#: ../../source/yaml_format.rst:57
msgid "Defining Environment Variables"
msgstr ""

#: ../../source/yaml_format.rst:59
msgid ""
"You can define environment variables and refer to them using the ``env`` "
"field."
msgstr ""

#: ../../source/yaml_format.rst:72
msgid "Defining and Using Parameters"
msgstr ""

#: ../../source/yaml_format.rst:74
msgid ""
"You can define parameters using the ``params`` field and refer to each "
"parameter as $1, $2, etc. Parameters can also be command substitutions or"
" environment variables. It can be overridden by the ``--params=`` "
"parameter of the ``start`` command."
msgstr ""

#: ../../source/yaml_format.rst:83
msgid "Named parameters are also available as follows."
msgstr ""

#: ../../source/yaml_format.rst:93
msgid "Using Command Substitution"
msgstr ""

#: ../../source/yaml_format.rst:95
msgid ""
"You can use command substitution in field values. I.e., a string enclosed"
" in backquotes (`) is evaluated as a command and replaced with the result"
" of standard output."
msgstr ""

#: ../../source/yaml_format.rst:106
msgid "Adding Conditional Logic"
msgstr ""

#: ../../source/yaml_format.rst:108
msgid ""
"Sometimes you have parts of a DAG that you only want to run under certain"
" conditions. You can use the ``preconditions`` field to add conditional "
"branches to your DAG."
msgstr ""

#: ../../source/yaml_format.rst:110
msgid "For example, the task below only runs on the first date of each month."
msgstr ""

#: ../../source/yaml_format.rst:121
msgid ""
"If you want the DAG to continue to the next step regardless of the step's"
" conditional check result, you can use the ``continueOn`` field:"
msgstr ""

#: ../../source/yaml_format.rst:135
msgid "User Defined Functions"
msgstr ""

#: ../../source/yaml_format.rst:137
msgid ""
"You can define functions in the DAG file and call them in steps. The "
"``params`` field is required for functions. The ``args`` field is used to"
" pass arguments to functions. The arguments can be command substitutions "
"or environment variables."
msgstr ""

#: ../../source/yaml_format.rst:155
msgid "Setting Environment Variables with Standard Output"
msgstr ""

#: ../../source/yaml_format.rst:157
msgid ""
"The ``output`` field can be used to set an environment variable with "
"standard output. Leading and trailing space will be trimmed "
"automatically. The environment variables can be used in subsequent steps."
msgstr ""

#: ../../source/yaml_format.rst:167
msgid "Redirecting Stdout and Stderr"
msgstr ""

#: ../../source/yaml_format.rst:169
msgid "The `stdout` field can be used to write standard output to a file."
msgstr ""

#: ../../source/yaml_format.rst:178
msgid ""
"The `stderr` field allows to redirect stderr to other file without "
"writing to the normal log file."
msgstr ""

#: ../../source/yaml_format.rst:189
msgid "Adding Lifecycle Hooks"
msgstr ""

#: ../../source/yaml_format.rst:191
msgid ""
"It is often desirable to take action when a specific event happens, for "
"example, when a DAG fails. To achieve this, you can use `handlerOn` "
"fields."
msgstr ""

#: ../../source/yaml_format.rst:205
msgid "Repeating a Task at Regular Intervals"
msgstr ""

#: ../../source/yaml_format.rst:207
msgid ""
"If you want a task to repeat execution at regular intervals, you can use "
"the `repeatPolicy` field. If you want to stop the repeating task, you can"
" use the `stop` command to gracefully stop the task."
msgstr ""

#: ../../source/yaml_format.rst:219
msgid "Scheduling a DAG with Cron Expression"
msgstr ""

#: ../../source/yaml_format.rst:221
msgid "You can use the `schedule` field to schedule a DAG with Cron expression."
msgstr ""

#: ../../source/yaml_format.rst:230
msgid "See :ref:`scheduler configuration` for more details."
msgstr ""

#: ../../source/yaml_format.rst:233
msgid "All Available Fields for DAGs"
msgstr ""

#: ../../source/yaml_format.rst:235
msgid ""
"This section provides a comprehensive list of available fields that can "
"be used to configure DAGs and their steps in detail. Each field serves a "
"specific purpose, enabling granular control over how the DAG runs. The "
"fields include:"
msgstr ""

#: ../../source/yaml_format.rst:237
msgid ""
"``name``: The name of the DAG, which is optional. The default name is the"
" name of the file."
msgstr ""

#: ../../source/yaml_format.rst:238
msgid "``description``: A brief description of the DAG."
msgstr ""

#: ../../source/yaml_format.rst:239
msgid "``schedule``: The execution schedule of the DAG in Cron expression format."
msgstr ""

#: ../../source/yaml_format.rst:240
msgid "``group``: The group name to organize DAGs, which is optional."
msgstr ""

#: ../../source/yaml_format.rst:241
msgid ""
"``tags``: Free tags that can be used to categorize DAGs, separated by "
"commas."
msgstr ""

#: ../../source/yaml_format.rst:242
msgid ""
"``env``: Environment variables that can be accessed by the DAG and its "
"steps."
msgstr ""

#: ../../source/yaml_format.rst:243
msgid ""
"``logDir``: The directory where the standard output is written. The "
"default value is ``${DAGU_HOME}/logs/dags``."
msgstr ""

#: ../../source/yaml_format.rst:244
msgid ""
"``restartWaitSec``: The number of seconds to wait after the DAG process "
"stops before restarting it."
msgstr ""

#: ../../source/yaml_format.rst:245
msgid ""
"``histRetentionDays``: The number of days to retain execution history "
"(not for log files)."
msgstr ""

#: ../../source/yaml_format.rst:246
msgid "``delaySec``: The interval time in seconds between steps."
msgstr ""

#: ../../source/yaml_format.rst:247
msgid "``maxActiveRuns``: The maximum number of parallel running steps."
msgstr ""

#: ../../source/yaml_format.rst:248
msgid ""
"``params``: The default parameters that can be referred to by ``$1``, "
"``$2``, and so on."
msgstr ""

#: ../../source/yaml_format.rst:249
msgid ""
"``preconditions``: The conditions that must be met before a DAG or step "
"can run."
msgstr ""

#: ../../source/yaml_format.rst:250
msgid ""
"``mailOn``: Whether to send an email notification when a DAG or step "
"fails or succeeds."
msgstr ""

#: ../../source/yaml_format.rst:251
msgid ""
"``MaxCleanUpTimeSec``: The maximum time to wait after sending a TERM "
"signal to running steps before killing them."
msgstr ""

#: ../../source/yaml_format.rst:252
msgid ""
"``handlerOn``: The command to execute when a DAG or step succeeds, fails,"
" cancels, or exits."
msgstr ""

#: ../../source/yaml_format.rst:253
msgid "``steps``: A list of steps to execute in the DAG."
msgstr ""

#: ../../source/yaml_format.rst:255
msgid ""
"In addition, a global configuration file, ``$DAGU_HOME/config.yaml``, can"
" be used to gather common settings, such as ``logDir`` or ``env``."
msgstr ""

#: ../../source/yaml_format.rst:257
msgid ""
"Note: If ``DAGU_HOME`` environment variable is not set, the default path "
"is ``$HOME/.dagu/config.yaml``."
msgstr ""

#: ../../source/yaml_format.rst:259 ../../source/yaml_format.rst:314
msgid "Example:"
msgstr ""

#: ../../source/yaml_format.rst:295
msgid "All Available Fields for Steps"
msgstr ""

#: ../../source/yaml_format.rst:297
msgid "Each step can have its own set of configurations, including:"
msgstr ""

#: ../../source/yaml_format.rst:299
msgid "``name``: The name of the step."
msgstr ""

#: ../../source/yaml_format.rst:300
msgid "``description``: A brief description of the step."
msgstr ""

#: ../../source/yaml_format.rst:301
msgid "``dir``: The working directory for the step."
msgstr ""

#: ../../source/yaml_format.rst:302
msgid "``command``: The command and parameters to execute."
msgstr ""

#: ../../source/yaml_format.rst:303
msgid "``stdout``: The file to which the standard output is written."
msgstr ""

#: ../../source/yaml_format.rst:304
msgid "``output``: The variable to which the result is written."
msgstr ""

#: ../../source/yaml_format.rst:305
msgid "``script``: The script to execute."
msgstr ""

#: ../../source/yaml_format.rst:306
msgid ""
"``signalOnStop``: The signal name (e.g., ``SIGINT``) to be sent when the "
"process is stopped."
msgstr ""

#: ../../source/yaml_format.rst:307
msgid ""
"``mailOn``: Whether to send an email notification when the step fails or "
"succeeds."
msgstr ""

#: ../../source/yaml_format.rst:308
msgid ""
"``continueOn``: Whether to continue to the next step, regardless of "
"whether the step failed or not or the preconditions are met or not."
msgstr ""

#: ../../source/yaml_format.rst:309
msgid "``retryPolicy``: The retry policy for the step."
msgstr ""

#: ../../source/yaml_format.rst:310
msgid "``repeatPolicy``: The repeat policy for the step."
msgstr ""

#: ../../source/yaml_format.rst:311
msgid "``preconditions``: The conditions that must be met before a step can run."
msgstr ""

#: ../../source/yaml_format.rst:312
msgid "``depends``: The step depends on the other step."
msgstr ""

