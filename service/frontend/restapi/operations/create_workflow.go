// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWorkflowHandlerFunc turns a function with the right signature into a create workflow handler
type CreateWorkflowHandlerFunc func(CreateWorkflowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateWorkflowHandlerFunc) Handle(params CreateWorkflowParams) middleware.Responder {
	return fn(params)
}

// CreateWorkflowHandler interface for that can handle valid create workflow params
type CreateWorkflowHandler interface {
	Handle(CreateWorkflowParams) middleware.Responder
}

// NewCreateWorkflow creates a new http.Handler for the create workflow operation
func NewCreateWorkflow(ctx *middleware.Context, handler CreateWorkflowHandler) *CreateWorkflow {
	return &CreateWorkflow{Context: ctx, Handler: handler}
}

/*
	CreateWorkflow swagger:route POST /workflows createWorkflow

CreateWorkflow create workflow API
*/
type CreateWorkflow struct {
	Context *middleware.Context
	Handler CreateWorkflowHandler
}

func (o *CreateWorkflow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateWorkflowParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateWorkflowBody create workflow body
//
// swagger:model CreateWorkflowBody
type CreateWorkflowBody struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this create workflow body
func (o *CreateWorkflowBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateWorkflowBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"action", "body", o.Action); err != nil {
		return err
	}

	return nil
}

func (o *CreateWorkflowBody) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create workflow body based on context it is used
func (o *CreateWorkflowBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateWorkflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateWorkflowBody) UnmarshalBinary(b []byte) error {
	var res CreateWorkflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
