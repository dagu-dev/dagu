// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDagDetailResponse get dag detail response
//
// swagger:model getDagDetailResponse
type GetDagDetailResponse struct {

	// d a g
	// Required: true
	DAG *DagStatusWithDetails `json:"DAG"`

	// definition
	// Required: true
	Definition *string `json:"Definition"`

	// errors
	// Required: true
	Errors []string `json:"Errors"`

	// graph
	// Required: true
	Graph *string `json:"Graph"`

	// log data
	// Required: true
	LogData *DagLogResponse `json:"LogData"`

	// log Url
	// Required: true
	LogURL *string `json:"LogUrl"`

	// sc log
	// Required: true
	ScLog *DagSchedulerLogResponse `json:"ScLog"`

	// step log
	// Required: true
	StepLog *DagStepLogResponse `json:"StepLog"`

	// tab
	// Required: true
	Tab *string `json:"Tab"`

	// title
	// Required: true
	Title *string `json:"Title"`
}

// Validate validates this get dag detail response
func (m *GetDagDetailResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDAG(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraph(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTab(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDagDetailResponse) validateDAG(formats strfmt.Registry) error {

	if err := validate.Required("DAG", "body", m.DAG); err != nil {
		return err
	}

	if m.DAG != nil {
		if err := m.DAG.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DAG")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DAG")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) validateDefinition(formats strfmt.Registry) error {

	if err := validate.Required("Definition", "body", m.Definition); err != nil {
		return err
	}

	return nil
}

func (m *GetDagDetailResponse) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("Errors", "body", m.Errors); err != nil {
		return err
	}

	return nil
}

func (m *GetDagDetailResponse) validateGraph(formats strfmt.Registry) error {

	if err := validate.Required("Graph", "body", m.Graph); err != nil {
		return err
	}

	return nil
}

func (m *GetDagDetailResponse) validateLogData(formats strfmt.Registry) error {

	if err := validate.Required("LogData", "body", m.LogData); err != nil {
		return err
	}

	if m.LogData != nil {
		if err := m.LogData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LogData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LogData")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) validateLogURL(formats strfmt.Registry) error {

	if err := validate.Required("LogUrl", "body", m.LogURL); err != nil {
		return err
	}

	return nil
}

func (m *GetDagDetailResponse) validateScLog(formats strfmt.Registry) error {

	if err := validate.Required("ScLog", "body", m.ScLog); err != nil {
		return err
	}

	if m.ScLog != nil {
		if err := m.ScLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ScLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ScLog")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) validateStepLog(formats strfmt.Registry) error {

	if err := validate.Required("StepLog", "body", m.StepLog); err != nil {
		return err
	}

	if m.StepLog != nil {
		if err := m.StepLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StepLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("StepLog")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) validateTab(formats strfmt.Registry) error {

	if err := validate.Required("Tab", "body", m.Tab); err != nil {
		return err
	}

	return nil
}

func (m *GetDagDetailResponse) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("Title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get dag detail response based on the context it is used
func (m *GetDagDetailResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDAG(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStepLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDagDetailResponse) contextValidateDAG(ctx context.Context, formats strfmt.Registry) error {

	if m.DAG != nil {

		if err := m.DAG.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DAG")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DAG")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) contextValidateLogData(ctx context.Context, formats strfmt.Registry) error {

	if m.LogData != nil {

		if err := m.LogData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LogData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LogData")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) contextValidateScLog(ctx context.Context, formats strfmt.Registry) error {

	if m.ScLog != nil {

		if err := m.ScLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ScLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ScLog")
			}
			return err
		}
	}

	return nil
}

func (m *GetDagDetailResponse) contextValidateStepLog(ctx context.Context, formats strfmt.Registry) error {

	if m.StepLog != nil {

		if err := m.StepLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StepLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("StepLog")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDagDetailResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDagDetailResponse) UnmarshalBinary(b []byte) error {
	var res GetDagDetailResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
